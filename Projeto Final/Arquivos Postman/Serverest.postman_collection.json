{
	"info": {
		"_postman_id": "f058a883-72e9-4ba0-b297-e08da2875949",
		"name": "Serverest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18526027"
	},
	"item": [
		{
			"name": "/usuarios",
			"item": [
				{
					"name": "Casos negativos",
					"item": [
						{
							"name": "Cadastrar usuários",
							"item": [
								{
									"name": "001 Cadastrar usuário com email já utilizado",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"    } catch{\r",
													"        console.warn(\"erro ao criar usuário\")\r",
													"    }})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body({\"message\": \"Este email já está sendo usado\"});\r",
													"});\r",
													"\r",
													"\r",
													"const status = 400\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(status);\r",
													"});\r",
													"\r",
													"\r",
													"//---------------------deletes------------------------\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_userId')\r",
													"\r",
													" const postRequest = {\r",
													"        url: `${url}/usuarios/${id}`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"                'Content-Type': 'application/json'\r",
													"                }\r",
													"                }\r",
													"\r",
													"        //deletando usuário\r",
													"        pm.sendRequest(postRequest, (err, response) => {\r",
													"        const res = response.json()\r",
													"        console.log(err ? err : res);\r",
													"            try{\r",
													"                console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                }catch{\r",
													"                    console.log(\"Erro deletar usuário\")\r",
													"\r",
													"            }})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"Marinaldo\",\r\n    \"email\": \"{{emailUsuario}}\",\r\n    \"password\": \"{{senhaUsuario}}\",\r\n    \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 Cadastrar usuário com email vazio",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body retornou o esperado\", () => {\r",
													"    pm.response.to.have.body({\"email\": \"email não pode ficar em branco\"});\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Marinaldo\",\r\n  \"email\": \"{{emailVazio}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 Cadastrar usuário com nome vazio",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body({\"nome\": \"nome não pode ficar em branco\"});\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"\",\r\n  \"email\": \"beltrano@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Buscar usuário por id",
							"item": [
								{
									"name": "001 Buscar usuário com ID inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"O body retornou o esperado\",  () => {\r",
													"    pm.response.to.have.body({\"message\": \"Usuário não encontrado\"});\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 400\", () =>{\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/usuarios/0uxuPY0cbm",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"0uxuPY0cbm"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Excluir usuário por ID",
							"item": [
								{
									"name": "001 Deletar usuário com ID inválido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\",  () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"o body retorna o esperado\", () => {\r",
													"    pm.response.to.have.body({ message:\"Nenhum registro excluído\" });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/usuarios/BmLIWT96RpGowyQw",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"BmLIWT96RpGowyQw"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Editar usuário",
							"item": [
								{
									"name": "001 Editar usuário com email já utilizado",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"    // mandando a requisição de criar usuário\r",
													"    pm.sendRequest(postRequest, (err, response) => {\r",
													"        const res = response.json()\r",
													"        console.log(err ? err : res);\r",
													"        try {\r",
													"            //setando as informações\r",
													"            pm.environment.set('senhaUsuario', senha)\r",
													"            pm.environment.set('emailUsuario', email)\r",
													"            pm.environment.set('_userId', res._id)\r",
													"\r",
													"            const postRequest = {\r",
													"\r",
													"            url: `${url}/usuarios`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\": name,\r",
													"                    \"email\": \"p\"+email,\r",
													"                    \"password\": senha,\r",
													"                    \"administrador\": \"true\"\r",
													"                })\r",
													"            }\r",
													"\r",
													"            }\r",
													"         // mandando a requisição de criar usuário\r",
													"            pm.sendRequest(postRequest, (err, response) => {\r",
													"                const res = response.json()\r",
													"                console.log(err ? err : res);\r",
													"                try {\r",
													"                    //setando as informações\r",
													"                    pm.environment.set('_userId2', res._id)\r",
													"                } catch{\r",
													"                    console.warn(\"erro ao criar usuário\")\r",
													"    }})\r",
													"    } catch{\r",
													"        console.warn(\"erro ao criar usuário\")\r",
													"    }})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body({\"message\": \"Este email já está sendo usado\"});\r",
													"});\r",
													"\r",
													"\r",
													"const status = 400\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(status);\r",
													"});\r",
													"\r",
													"\r",
													"//---------------------deletes------------------------\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_userId');\r",
													"const id2 = pm.environment.get('_userId2');\r",
													"\r",
													" const postRequest = {\r",
													"        url: `${url}/usuarios/${id}`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"                'Content-Type': 'application/json'\r",
													"                }\r",
													"                }\r",
													"\r",
													"        //deletando primeiro usuário\r",
													"        pm.sendRequest(postRequest, (err, response) => {\r",
													"        const res = response.json()\r",
													"        console.log(err ? err : res);\r",
													"            try{\r",
													"                console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"\r",
													"        const postRequest = {\r",
													"        url: `${url}/usuarios/${id2}`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"                'Content-Type': 'application/json'\r",
													"                }\r",
													"                }\r",
													"\r",
													"        //deletando segundo usuário\r",
													"        pm.sendRequest(postRequest, (err, response) => {\r",
													"        const res = response.json()\r",
													"        console.log(err ? err : res);\r",
													"            try{\r",
													"                console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                }catch{\r",
													"                    console.log(\"Erro deletar usuário\")}})\r",
													"\r",
													"        }catch{\r",
													"            console.log(\"Erro deletar usuário\")\r",
													"\r",
													"            }})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"Amaral\",\r\n    \"email\": \"{{emailUsuario}}\",\r\n    \"password\": \"teste\",\r\n    \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios/{{_userId2}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"{{_userId2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 Editar usuário com email vazio",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"    // mandando a requisição de criar usuário\r",
													"    pm.sendRequest(postRequest, (err, response) => {\r",
													"        const res = response.json()\r",
													"        console.log(err ? err : res);\r",
													"        try {\r",
													"            //setando as informações\r",
													"            pm.environment.set('senhaUsuario', senha)\r",
													"            pm.environment.set('emailUsuario', email)\r",
													"            pm.environment.set('_userId', res._id)\r",
													"\r",
													"    } catch{\r",
													"        console.warn(\"erro ao criar usuário\")\r",
													"    }})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body({\r",
													"    \"email\": \"email não pode ficar em branco\"});\r",
													"});\r",
													"\r",
													"\r",
													"const status = 400\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(status);\r",
													"});\r",
													"\r",
													"\r",
													"//---------------------deletes------------------------\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_userId');\r",
													"\r",
													" const postRequest = {\r",
													"        url: `${url}/usuarios/${id}`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"                'Content-Type': 'application/json'\r",
													"                }\r",
													"                }\r",
													"\r",
													"        //deletando primeiro usuário\r",
													"        pm.sendRequest(postRequest, (err, response) => {\r",
													"        const res = response.json()\r",
													"        console.log(err ? err : res);\r",
													"            try{\r",
													"                console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"        }catch{\r",
													"            console.log(\"Erro deletar usuário\")\r",
													"\r",
													"            }})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"Odette\",\r\n    \"email\": \"{{emailVazio}}\",\r\n    \"password\": \"teste\",\r\n    \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios/{{_userId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"{{_userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 Editar usuário com nome vazio",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"    // mandando a requisição de criar usuário\r",
													"    pm.sendRequest(postRequest, (err, response) => {\r",
													"        const res = response.json()\r",
													"        console.log(err ? err : res);\r",
													"        try {\r",
													"            //setando as informações\r",
													"            pm.environment.set('senhaUsuario', senha)\r",
													"            pm.environment.set('emailUsuario', email)\r",
													"            pm.environment.set('_userId', res._id)\r",
													"\r",
													"    } catch{\r",
													"        console.warn(\"erro ao criar usuário\")\r",
													"    }})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body({\r",
													"    \"nome\": \"nome não pode ficar em branco\"});\r",
													"});\r",
													"\r",
													"\r",
													"const status = 400\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(status);\r",
													"});\r",
													"\r",
													"\r",
													"//---------------------deletes------------------------\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_userId');\r",
													"\r",
													" const postRequest = {\r",
													"        url: `${url}/usuarios/${id}`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"                'Content-Type': 'application/json'\r",
													"                }\r",
													"                }\r",
													"\r",
													"        //deletando primeiro usuário\r",
													"        pm.sendRequest(postRequest, (err, response) => {\r",
													"        const res = response.json()\r",
													"        console.log(err ? err : res);\r",
													"            try{\r",
													"                console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"        }catch{\r",
													"            console.log(\"Erro deletar usuário\")\r",
													"\r",
													"            }})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"\",\r\n    \"email\": \"{{emailUsuario}}\",\r\n    \"password\": \"teste\",\r\n    \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios/{{_userId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"{{_userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 Editar usuário com nome e senha vazia",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"    // mandando a requisição de criar usuário\r",
													"    pm.sendRequest(postRequest, (err, response) => {\r",
													"        const res = response.json()\r",
													"        console.log(err ? err : res);\r",
													"        try {\r",
													"            //setando as informações\r",
													"            pm.environment.set('senhaUsuario', senha)\r",
													"            pm.environment.set('emailUsuario', email)\r",
													"            pm.environment.set('_userId', res._id)\r",
													"\r",
													"    } catch{\r",
													"        console.warn(\"erro ao criar usuário\")\r",
													"    }})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body({\r",
													"    \"nome\": \"nome não pode ficar em branco\",\r",
													"    \"password\": \"password não pode ficar em branco\"\r",
													"});\r",
													"});\r",
													"\r",
													"\r",
													"const status = 400\r",
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(status);\r",
													"});\r",
													"\r",
													"\r",
													"//---------------------deletes------------------------\r",
													"\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_userId');\r",
													"\r",
													" const postRequest = {\r",
													"        url: `${url}/usuarios/${id}`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"                'Content-Type': 'application/json'\r",
													"                }\r",
													"                }\r",
													"\r",
													"        //deletando primeiro usuário\r",
													"        pm.sendRequest(postRequest, (err, response) => {\r",
													"        const res = response.json()\r",
													"        console.log(err ? err : res);\r",
													"            try{\r",
													"                console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"        }catch{\r",
													"            console.log(\"Erro deletar usuário\")\r",
													"\r",
													"            }})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"nome\": \"\",\r\n    \"email\": \"{{emailUsuario}}\",\r\n    \"password\": \"\",\r\n    \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios/{{_userId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"{{_userId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Casos positivos",
					"item": [
						{
							"name": "Cadastrar usuários",
							"item": [
								{
									"name": "001 cadastrar usuários",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// geral email e senha\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"\r",
													"// setando email e senha\r",
													"pm.environment.set('emailUsuario', email);\r",
													"pm.environment.set('nomeUsuario', name);\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//verificando o status code\r",
													"pm.test(\"Status code is 201\", () =>{\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"// verificando se o cadastro foi concluído\r",
													"pm.test(\"Realizou o cadastro\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"// ---------------------------deletes----------------------------\r",
													"// pegando id do usuário\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('_userId',response._id)\r",
													"// setando o id do usuário\r",
													"const url = pm.environment.get('baseURL')\r",
													"const id = pm.environment.get('_userId')\r",
													"\r",
													"//criando a requisição\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios/${id}`,\r",
													"    method: 'DELETE',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"    }\r",
													"\r",
													"//enviando a requisição \r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{nomeUsuario}}\",\r\n  \"email\": \"{{emailUsuario}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Buscar por ID",
							"item": [
								{
									"name": "001 Buscar usuário por ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const string = `${\"nome\", \"email\", \"password\", \"administrador\"}`\r",
													"\r",
													"pm.test(\"O body contém as strings esperadas\", () =>{\r",
													"    pm.expect(pm.response.text()).to.include(string);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"// -------------------------------- deletes-------------------------------\r",
													"\r",
													"// pegando id do usuário\r",
													"const response = pm.response.json();\r",
													"pm.environment.set('idValido',response._id)\r",
													"// setando o id do usuário\r",
													"const url = pm.environment.get('baseURL')\r",
													"const id = pm.environment.get('idValido')\r",
													"\r",
													"//criando a requisição\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios/${id}`,\r",
													"    method: 'DELETE',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"    }\r",
													"\r",
													"//enviando a requisição \r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try { \r",
													"        pm.environment.set('idValido', res._id)\r",
													"    } catch{\r",
													"        console.warn(\"Erro ao criar usuário\")\r",
													"    }})\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/usuarios/{{idValido}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"{{idValido}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Excluir usuário por ID",
							"item": [
								{
									"name": "001 Excluir usuário por ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"\r",
													"// criando um usuário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"//enviando a requisição \r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_userId', res._id)\r",
													"    } catch{\r",
													"        console.log()\r",
													"    }\r",
													"\r",
													"})\r",
													"     \r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 200\", () =>{\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"o body retorna o esperado\", () => {\r",
													"    pm.response.to.have.body({ message:\"Registro excluído com sucesso\" });\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/usuarios/{{_userId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"{{_userId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Listar usuários cadastrados",
							"item": [
								{
									"name": "001 Buscar usuários cadastrados",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// verificando status code\r",
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Successful GET request\",  () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/usuarios",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Editar usuário por ID",
							"item": [
								{
									"name": "001 Editar usuário por ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body({\"message\": \"Registro alterado com sucesso\"});\r",
													"});\r",
													"\r",
													"\r",
													"// --------------------------------------- deletes-----------------\r",
													"\r",
													"const url = pm.environment.get('baseURL')\r",
													"const id = pm.environment.get('_userId')\r",
													"\r",
													"//criando a requisição\r",
													"const postRequest = {\r",
													"    url: `${url}/usuarios/${id}`,\r",
													"    method: 'DELETE',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    }\r",
													"    }\r",
													"\r",
													"//enviando a requisição \r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"\r",
													"//criando requisição\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"//enviando requisição\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //operação\r",
													"        pm.environment.set('_userId', res._id)\r",
													"\r",
													"        }catch{\r",
													"            console.log()\r",
													"        }\r",
													"           \r",
													"  \r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"alterando nome\",\r\n  \"email\": \"alterandoemail@teste.com\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/usuarios/{{_userId}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"usuarios",
												"{{_userId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "/login",
			"item": [
				{
					"name": "Casos negativos",
					"item": [
						{
							"name": "001 Realizar login com email vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body is correct\", () => {\r",
											"    pm.response.to.have.body({\"email\": \"email não pode ficar em branco\"});\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", () =>{\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"email\": \"{{emailVazio}}\",\r\n    \"password\": \"{{senhaValida}}\"\r\n } ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "002 Realizar login com senha inválida",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\",  () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body retornou o esperado\", () => {\r",
											"    pm.response.to.have.body({\"message\": \"Email e/ou senha inválidos\"});\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// --------------------------------deletes---------------------------\r",
											"// pegando variáveis\r",
											"const url = pm.environment.get('baseURL')\r",
											"const id = pm.environment.get('_userId')\r",
											"\r",
											"//criando a requisição\r",
											"const deleteRequest = {\r",
											"    url: `${url}/usuarios/${id}`,\r",
											"    method: 'DELETE',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"    }\r",
											"\r",
											"//enviando a requisição \r",
											"pm.sendRequest(deleteRequest, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"// criando um usário\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"// mandando a requisição de criar usuário\r",
											"pm.sendRequest(postRequest, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //setando as informações\r",
											"        pm.environment.set('senhaUsuario', senha)\r",
											"        pm.environment.set('emailUsuario', email)\r",
											"        pm.environment.set('_userId', res._id)\r",
											"\r",
											"    } catch{\r",
											"        console.warn(\"Erro ao cadastrar usuário\")\r",
											"    }})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"email\": \"{{emailUsuario}}\",\r\n    \"password\": \"senhaErrada\"\r\n } ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "003 Realizar login com email inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\",  () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body retornou o esperado\", () => {\r",
											"    pm.response.to.have.body({\"message\": \"Email e/ou senha inválidos\"});\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// --------------------------------deletes---------------------------\r",
											"// pegando variáveis\r",
											"const url = pm.environment.get('baseURL')\r",
											"const id = pm.environment.get('_userId')\r",
											"\r",
											"//criando a requisição\r",
											"const deleteRequest = {\r",
											"    url: `${url}/usuarios/${id}`,\r",
											"    method: 'DELETE',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    }\r",
											"    }\r",
											"\r",
											"//enviando a requisição \r",
											"pm.sendRequest(deleteRequest, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"// criando um usário\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"// mandando a requisição de criar usuário\r",
											"pm.sendRequest(postRequest, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //setando as informações\r",
											"        pm.environment.set('senhaUsuario', senha)\r",
											"        pm.environment.set('emailUsuario', email)\r",
											"        pm.environment.set('_userId', res._id)\r",
											"\r",
											"    } catch{\r",
											"        console.warn(\"Erro ao cadastrar usuário\")\r",
											"    }})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"email\": \"emailfalse@teste.com\",\r\n    \"password\": \"{{senhaUsuario}}\"\r\n } ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "004 Realizar login com senha vazia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\",  () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body retornou o esperado\", () => {\r",
											"    pm.response.to.have.body({\"password\": \"password não pode ficar em branco\"});\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"email\": \"emailfalse@teste.com\",\r\n    \"password\": \"{{senhaVazia}}\"\r\n } ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "005 Realizar login com senha e email vazios",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\",  () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body retornou o esperado\", () => {\r",
											"    pm.response.to.have.body({\r",
											"    \"email\": \"email não pode ficar em branco\",\r",
											"    \"password\": \"password não pode ficar em branco\"});\r",
											"    });\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"email\": \"{{emailVazio}}\",\r\n    \"password\": \"{{senhaVazia}}\"\r\n } ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Casos positivos",
					"item": [
						{
							"name": "001 Realizar login",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"\r",
											"// criando um usário\r",
											"const postRequest = {\r",
											"\r",
											"    url: `${url}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"nome\": name,\r",
											"            \"email\": email,\r",
											"            \"password\": senha,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"\r",
											"}\r",
											"\r",
											"// mandando a requisição de criar usuário\r",
											"pm.sendRequest(postRequest, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err : res);\r",
											"    try {\r",
											"        //setando as informações\r",
											"        pm.environment.set('_userId', res._id)\r",
											"        pm.environment.set('senhaUsuario', senha)\r",
											"        pm.environment.set('emailUsuario', email)}\r",
											"        catch{\r",
											"            console.warn(\"Erro ao criar usuário\")\r",
											"        }})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------------------- deletes-----------\r",
											"const id = pm.environment.get('_userId')\r",
											"const url = pm.environment.get('baseURL')\r",
											"//criando a requisição\r",
											"    const postRequest = {\r",
											"        url: `${url}/usuarios/${id}`,\r",
											"            method: 'DELETE',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"                    }\r",
											"                }\r",
											"\r",
											"        //deletando usuário\r",
											"            pm.sendRequest(postRequest, (err, response) => {\r",
											"                const res = response.json()\r",
											"                console.log(err ? err : res);})\r",
											"\r",
											"           \r",
											"       "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{emailUsuario}}\",\r\n  \"password\": \"{{senhaUsuario}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "/produtos",
			"item": [
				{
					"name": "Casos positivos",
					"item": [
						{
							"name": "Cadastrar produto",
							"item": [
								{
									"name": "001 Cadastrar produto",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"\r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"                //setando o token\r",
													"                pm.environment.set('token', res.authorization.slice(7))\r",
													"                  \r",
													"            }                \r",
													"            catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\",  () => {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//setando id do produto\r",
													"const response = pm.response.json();\r",
													"pm.environment.set(\"idProduto\", response._id);\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"const token =  pm.environment.get('token');\r",
													"\r",
													"    // criando requisição\r",
													"     const deleteRequest = {\r",
													"        url: `${url}/produtos/${idP}`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization' : `Bearer ${token}`\r",
													"                }\r",
													"                }\r",
													"\r",
													"            //deletando produto \r",
													"            pm.sendRequest(deleteRequest, (err, response) => {\r",
													"                const res = response.json()\r",
													"                console.log(err ? err : res); \r",
													"                try{\r",
													"                    const id = pm.environment.get('_userId')\r",
													"\r",
													"                    //criando a requisição\r",
													"                    const postRequest = {\r",
													"                        url: `${url}/usuarios/${id}`,\r",
													"                        method: 'DELETE',\r",
													"                        header: {\r",
													"                            'Content-Type': 'application/json'\r",
													"                        }\r",
													"                        }\r",
													"\r",
													"                    //deletando usuário\r",
													"                    pm.sendRequest(postRequest, (err, response) => {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);})\r",
													"\r",
													"                } catch{\r",
													"                    console.log();\r",
													"                }\r",
													"            })\r",
													"       "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{nomeProduto}}\",\r\n  \"preco\": 9,\r\n  \"descricao\": \"{{nomeProduto}}\",\r\n  \"quantidade\": 10\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Listar produtos",
							"item": [
								{
									"name": "001 Listar produtos cadastrados",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\",  () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"quantidade\", \"produtos\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Editar produto",
							"item": [
								{
									"name": "001 Editar produto por ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\":nomeProduto,\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                            pm.environment.set('idProduto', res._id);\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\",  () =>{\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body({\r",
													"    \"message\": \"Registro alterado com sucesso\"\r",
													"});\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const token =  pm.environment.get('token');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"\r",
													"    // criando requisição\r",
													"     const deleteRequest = {\r",
													"        url: `${url}/produtos/${idP}`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization' : `Bearer ${token}`\r",
													"                }\r",
													"            }\r",
													"\r",
													"            //deletando produto \r",
													"            pm.sendRequest(deleteRequest, (err, response) => {\r",
													"                const res = response.json()\r",
													"                console.log(err ? err : res); \r",
													"                try{\r",
													"                    const id = pm.environment.get('_userId')\r",
													"\r",
													"                //criando a requisição\r",
													"                const postRequest = {\r",
													"                    url: `${url}/usuarios/${id}`,\r",
													"                    method: 'DELETE',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json'\r",
													"                        }\r",
													"                        }\r",
													"\r",
													"                //deletando usuário\r",
													"                pm.sendRequest(postRequest, (err, response) => {\r",
													"                    const res = response.json()\r",
													"                    console.log(err ? err : res);})\r",
													"\r",
													"                } catch{\r",
													"                    console.log();\r",
													"                }\r",
													"            })\r",
													"       "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n            \"nome\": \"produtoTeste\",\r\n            \"preco\": 1000,\r\n            \"descricao\": \"teste produto\",\r\n            \"quantidade\": 10\r\n        }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/{{idProduto}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{idProduto}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Buscar produto por ID",
							"item": [
								{
									"name": "001 Buscar produto por ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\":\"iphone\",\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                            pm.environment.set(\"idProduto\", res._id);\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\",  () =>{\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// verificando saída do body\r",
													"const string = `${ \"_id\", \"quantidade\",\"nome\",\"descricao\", \"preco\"}`\r",
													"\r",
													"pm.test(\"O body contém as strings esperadas\", () =>{\r",
													"    pm.expect(pm.response.text()).to.include(string);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"const token =  pm.environment.get('token');\r",
													"\r",
													"    // criando requisição\r",
													"     const deleteRequest = {\r",
													"        url: `${url}/produtos/${idP}`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization' : `Bearer ${token}`\r",
													"                }\r",
													"            }\r",
													"\r",
													"            //deletando produto \r",
													"            pm.sendRequest(deleteRequest, (err, response) => {\r",
													"                const res = response.json()\r",
													"                console.log(err ? err : res); \r",
													"                try{\r",
													"                    const id = pm.environment.get('_userId')\r",
													"\r",
													"                //criando a requisição\r",
													"                const postRequest = {\r",
													"                    url: `${url}/usuarios/${id}`,\r",
													"                    method: 'DELETE',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json'\r",
													"                        }\r",
													"                        }\r",
													"\r",
													"                //deletando usuário\r",
													"                pm.sendRequest(postRequest, (err, response) => {\r",
													"                    const res = response.json()\r",
													"                    console.log(err ? err : res);})\r",
													"\r",
													"                } catch{\r",
													"                    console.log();\r",
													"                }\r",
													"            })\r",
													"       "
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/{{idProduto}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{idProduto}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Excluir produto",
							"item": [
								{
									"name": "001 Excluir produto por ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\": \"iphone\",\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                            pm.environment.set(\"idProduto\", res._id);\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\",  () =>{\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body({\"message\": \"Registro excluído com sucesso\"});\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id =  pm.environment.get('_userId')\r",
													"\r",
													"    \r",
													"\r",
													"    //criando a requisição\r",
													"    const postRequest = {\r",
													"    url: `${url}/usuarios/${id}`,\r",
													"    method: 'DELETE',\r",
													"    header: {\r",
													"            'Content-Type': 'application/json'\r",
													"            }\r",
													"         }\r",
													"\r",
													"        //deletando usuário\r",
													"        pm.sendRequest(postRequest, (err, response) => {\r",
													"        const res = response.json()\r",
													"        console.log(err ? err : res);\r",
													"        try{\r",
													"            console.log(\"Usuário excluído\")\r",
													"\r",
													"        }catch{\r",
													"            console.log(\"Não foi possível excluir o usuário\")\r",
													"\r",
													"        }})\r",
													"\r",
													"              "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/{{idProduto}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{idProduto}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Casos negativos",
					"item": [
						{
							"name": "Cadastrar produto",
							"item": [
								{
									"name": "001 Cadastrar produto com nome existente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            \r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\":nomeProduto,\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                            pm.environment.set(\"idProduto\", res._id);\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falaha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body is correct\", () => {\r",
													"    pm.response.to.have.body({\"message\": \"Já existe produto com esse nome\"});\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"const token =  pm.environment.get('token');\r",
													"const id = pm.environment.get('_userId')\r",
													"\r",
													"        //criando a requisição\r",
													"        const deleteProdutoRequest = {\r",
													"        url: `${url}/produtos/${idP}`,\r",
													"        method: 'DELETE',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization' : `Bearer ${token}`\r",
													"                     }\r",
													"                }\r",
													"\r",
													"        //deletando produto \r",
													"        pm.sendRequest(deleteProdutoRequest, (err, response) => {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res); try{\r",
													"\r",
													"            // criando requisição\r",
													"            const postRequest = {\r",
													"                url: `${url}/usuarios/${id}`,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"                    }\r",
													"                    }\r",
													"\r",
													"            //deletando usuário\r",
													"            pm.sendRequest(postRequest, (err, response) => {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try{\r",
													"                console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                }catch{\r",
													"                console.log(\"Erro deletar usuário\")\r",
													"                    }})\r",
													"       \r",
													"\r",
													"                }catch{console.warn(\"erro ao deletar produto\")} })\r",
													"                "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 Cadastrar produto sem o token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Erro no POST request\", () =>{\r",
													"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Iphone xr\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Celular\",\r\n  \"quantidade\": 381\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 Cadastrar produto sem descrição",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"\r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"                //setando o token\r",
													"                pm.environment.set('token', res.authorization.slice(7))\r",
													"                  \r",
													"            }                \r",
													"            catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retornar um Bad Request\",  () => {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body({\r",
													"    \"descricao\": \"descricao não pode ficar em branco\"\r",
													"});\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// -------------------------deletes-------------------\r",
													"\r",
													"//setando id do produto\r",
													"const response = pm.response.json();\r",
													"pm.environment.set(\"idProduto\", response._id);\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"const token =  pm.environment.get('token');\r",
													"\r",
													"    // criando requisição\r",
													"   \r",
													"    const id = pm.environment.get('_userId')\r",
													"\r",
													"        //criando a requisição\r",
													"        const postRequest = {\r",
													"            url: `${url}/usuarios/${id}`,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                        'Content-Type': 'application/json'\r",
													"                        }\r",
													"                        }\r",
													"\r",
													"        //deletando usuário\r",
													"        pm.sendRequest(postRequest, (err, response) => {\r",
													"        const res = response.json()\r",
													"        console.log(err ? err : res); \r",
													"        try {\r",
													"            console.log(\"Sucesso\")\r",
													"        }\r",
													"         catch{\r",
													"                console.log();\r",
													"                }\r",
													"            })\r",
													"       "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"{{nomeProduto}}\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"\",\r\n  \"quantidade\": 381\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"response": []
								},
								{
									"name": "004 Cadastrar produto sem nome",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"\r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"                //setando o token\r",
													"                pm.environment.set('token', res.authorization.slice(7))\r",
													"                  \r",
													"            }                \r",
													"            catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Retornar um Bad Request\",  () => {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
													"});\r",
													"\r",
													"\r",
													"// -------------------------deletes-------------------\r",
													"\r",
													"//setando id do produto\r",
													"const response = pm.response.json();\r",
													"pm.environment.set(\"idProduto\", response._id);\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"const token =  pm.environment.get('token');\r",
													"\r",
													"    // criando requisição\r",
													"   \r",
													"    const id = pm.environment.get('_userId')\r",
													"\r",
													"        //criando a requisição\r",
													"        const postRequest = {\r",
													"            url: `${url}/usuarios/${id}`,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                        'Content-Type': 'application/json'\r",
													"                        }\r",
													"                        }\r",
													"\r",
													"        //deletando usuário\r",
													"        pm.sendRequest(postRequest, (err, response) => {\r",
													"        const res = response.json()\r",
													"        console.log(err ? err : res); \r",
													"        try {\r",
													"            console.log(\"Sucesso\")\r",
													"        }\r",
													"         catch{\r",
													"                console.log();\r",
													"                }\r",
													"            })\r",
													"       "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"celular\",\r\n  \"quantidade\": 381\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "excluir produto por ID",
							"item": [
								{
									"name": "001 Excluir produto  que está no carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            \r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\":nomeProduto,\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                              pm.environment.set(\"idProduto\", res._id);\r",
													"                              const id = pm.environment.get('idProduto')\r",
													"\r",
													"                        //criando carinho\r",
													"                        const postRequestCarrinho = {\r",
													"                            url: `${url}/carrinhos`,\r",
													"                            method: 'POST',\r",
													"                            header: {\r",
													"                                'Authorization': `Bearer ${token}`,\r",
													"                                'Content-Type': 'application/json'\r",
													"                            },\r",
													"                            body: {\r",
													"                            mode: 'raw',\r",
													"                            raw: JSON.stringify({\r",
													"                                    \"produtos\": [{\r",
													"                                            \"idProduto\": id,\r",
													"                                            \"quantidade\": 1\r",
													"                                            } ]\r",
													"                                        })\r",
													"                                }\r",
													"                            }\r",
													"\r",
													"                        pm.sendRequest(postRequestCarrinho, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                            console.log(\"Sucesso\"); } \r",
													"                            catch{\r",
													"\r",
													"                            }})\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code name has string\", () => {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"const token =  pm.environment.get('token');\r",
													"\r",
													"    // criando requisição\r",
													"     const deleteRequest = {\r",
													"        url: `${url}/carrinhos/cancelar-compra`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization' : `Bearer ${token}`\r",
													"                }\r",
													"            }\r",
													"\r",
													"        //deletando carinho\r",
													"        pm.sendRequest(deleteRequest, (err, response) => {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res); \r",
													"            try{\r",
													"                const id = pm.environment.get('_userId')\r",
													"\r",
													"        //criando a requisição\r",
													"        const deleteProdutoRequest = {\r",
													"            url: `${url}/produtos/${idP}`,\r",
													"            method: 'DELETE',\r",
													"            header: {\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization' : `Bearer ${token}`\r",
													"                    }\r",
													"                    }\r",
													"\r",
													"                //deletando produto \r",
													"                pm.sendRequest(deleteProdutoRequest, (err, response) => {\r",
													"                const res = response.json()\r",
													"                console.log(err ? err : res); try{\r",
													"\r",
													"            // criando requisição\r",
													"                const postRequest = {\r",
													"                url: `${url}/usuarios/${id}`,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                'Content-Type': 'application/json'\r",
													"                        }\r",
													"                        }\r",
													"\r",
													"            //deletando usuário\r",
													"            pm.sendRequest(postRequest, (err, response) => {\r",
													"                const res = response.json()\r",
													"                console.log(err ? err : res);\r",
													"                try{\r",
													"                console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                }catch{\r",
													"                    console.log(\"Erro deletar usuário\")\r",
													"\r",
													"                }})\r",
													"       \r",
													"\r",
													"                }catch{console.warn(\"erro ao deletar produto\")} })\r",
													"\r",
													"                } catch{\r",
													"                    console.warn(\"erro ao deletar carinho\");\r",
													"                }\r",
													"            })\r",
													"\r",
													"                "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/produtos/{{idProduto}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{idProduto}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 Excluir produto com token ausente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            \r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\":nomeProduto,\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                            pm.environment.set(\"idProduto\", res._id);\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falaha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Body is correct\", () => {\r",
													"    pm.response.to.have.body({\r",
													"    \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\r",
													"});\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"const token =  pm.environment.get('token');\r",
													"const id = pm.environment.get('_userId')\r",
													"\r",
													"        //criando a requisição\r",
													"        const deleteProdutoRequest = {\r",
													"        url: `${url}/produtos/${idP}`,\r",
													"        method: 'DELETE',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization' : `Bearer ${token}`\r",
													"                     }\r",
													"                }\r",
													"\r",
													"        //deletando produto \r",
													"        pm.sendRequest(deleteProdutoRequest, (err, response) => {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res); try{\r",
													"\r",
													"            // criando requisição\r",
													"            const postRequest = {\r",
													"                url: `${url}/usuarios/${id}`,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"                    }\r",
													"                    }\r",
													"\r",
													"            //deletando usuário\r",
													"            pm.sendRequest(postRequest, (err, response) => {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try{\r",
													"                console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                }catch{\r",
													"                console.log(\"Erro deletar usuário\")\r",
													"                    }})\r",
													"       \r",
													"\r",
													"                }catch{console.warn(\"erro ao deletar produto\")} })\r",
													"                "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/{{idProduto}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{idProduto}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 Excluir  produto sem ser administrador",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"false\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            \r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\":nomeProduto,\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                            pm.environment.set(\"idProduto\", res._id);\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falaha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Body is correct\", () => {\r",
													"    pm.response.to.have.body({\r",
													"    \"message\": \"Rota exclusiva para administradores\"\r",
													"});\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"const token =  pm.environment.get('token');\r",
													"const id = pm.environment.get('_userId')\r",
													"\r",
													"        //criando a requisição\r",
													"        const deleteProdutoRequest = {\r",
													"        url: `${url}/produtos/${idP}`,\r",
													"        method: 'DELETE',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization' : `Bearer ${token}`\r",
													"                     }\r",
													"                }\r",
													"\r",
													"        //deletando produto \r",
													"        pm.sendRequest(deleteProdutoRequest, (err, response) => {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res); try{\r",
													"\r",
													"            // criando requisição\r",
													"            const postRequest = {\r",
													"                url: `${url}/usuarios/${id}`,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"                    }\r",
													"                    }\r",
													"\r",
													"            //deletando usuário\r",
													"            pm.sendRequest(postRequest, (err, response) => {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try{\r",
													"                console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                }catch{\r",
													"                console.log(\"Erro deletar usuário\")\r",
													"                    }})\r",
													"       \r",
													"\r",
													"                }catch{console.warn(\"erro ao deletar produto\")} })\r",
													"                "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/{{idProduto}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{idProduto}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Editar produto por ID",
							"item": [
								{
									"name": "001 Editar produto com nome existente",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            \r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\":nomeProduto,\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                            pm.environment.set(\"idProduto\", res._id);\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falaha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body is correct\", () => {\r",
													"    pm.response.to.have.body({\"message\": \"Já existe produto com esse nome\"});\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"const token =  pm.environment.get('token');\r",
													"const id = pm.environment.get('_userId')\r",
													"\r",
													"        //criando a requisição\r",
													"        const deleteProdutoRequest = {\r",
													"        url: `${url}/produtos/${idP}`,\r",
													"        method: 'DELETE',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization' : `Bearer ${token}`\r",
													"                     }\r",
													"                }\r",
													"\r",
													"        //deletando produto \r",
													"        pm.sendRequest(deleteProdutoRequest, (err, response) => {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res); try{\r",
													"\r",
													"            // criando requisição\r",
													"            const postRequest = {\r",
													"                url: `${url}/usuarios/${id}`,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"                    }\r",
													"                    }\r",
													"\r",
													"            //deletando usuário\r",
													"            pm.sendRequest(postRequest, (err, response) => {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try{\r",
													"                console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                }catch{\r",
													"                console.log(\"Erro deletar usuário\")\r",
													"                    }})\r",
													"       \r",
													"\r",
													"                }catch{console.warn(\"erro ao deletar produto\")} })\r",
													"                "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/{{idProduto}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{idProduto}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 Editar produto sem o token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            \r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\":nomeProduto,\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                            pm.environment.set(\"idProduto\", res._id);\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falaha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", () => {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Body is correct\", () => {\r",
													"    pm.response.to.have.body({\r",
													"    \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\r",
													"});\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"const token =  pm.environment.get('token');\r",
													"const id = pm.environment.get('_userId')\r",
													"\r",
													"        //criando a requisição\r",
													"        const deleteProdutoRequest = {\r",
													"        url: `${url}/produtos/${idP}`,\r",
													"        method: 'DELETE',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization' : `Bearer ${token}`\r",
													"                     }\r",
													"                }\r",
													"\r",
													"        //deletando produto \r",
													"        pm.sendRequest(deleteProdutoRequest, (err, response) => {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res); try{\r",
													"\r",
													"            // criando requisição\r",
													"            const postRequest = {\r",
													"                url: `${url}/usuarios/${id}`,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"                    }\r",
													"                    }\r",
													"\r",
													"            //deletando usuário\r",
													"            pm.sendRequest(postRequest, (err, response) => {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try{\r",
													"                console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                }catch{\r",
													"                console.log(\"Erro deletar usuário\")\r",
													"                    }})\r",
													"       \r",
													"\r",
													"                }catch{console.warn(\"erro ao deletar produto\")} })\r",
													"                "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/{{idProduto}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{idProduto}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 Editar produto sem ser administrador",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"false\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            \r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\":nomeProduto,\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                            pm.environment.set(\"idProduto\", res._id);\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falaha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", () => {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Body is correct\", () => {\r",
													"    pm.response.to.have.body({\r",
													"    \"message\": \"Rota exclusiva para administradores\"\r",
													"});\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"const token =  pm.environment.get('token');\r",
													"const id = pm.environment.get('_userId')\r",
													"\r",
													"        //criando a requisição\r",
													"        const deleteProdutoRequest = {\r",
													"        url: `${url}/produtos/${idP}`,\r",
													"        method: 'DELETE',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization' : `Bearer ${token}`\r",
													"                     }\r",
													"                }\r",
													"\r",
													"        //deletando produto \r",
													"        pm.sendRequest(deleteProdutoRequest, (err, response) => {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res); try{\r",
													"\r",
													"            // criando requisição\r",
													"            const postRequest = {\r",
													"                url: `${url}/usuarios/${id}`,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json'\r",
													"                    }\r",
													"                    }\r",
													"\r",
													"            //deletando usuário\r",
													"            pm.sendRequest(postRequest, (err, response) => {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try{\r",
													"                console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                }catch{\r",
													"                console.log(\"Erro deletar usuário\")\r",
													"                    }})\r",
													"       \r",
													"\r",
													"                }catch{console.warn(\"erro ao deletar produto\")} })\r",
													"                "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/produtos/{{idProduto}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{idProduto}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Buscar produto por ID",
							"item": [
								{
									"name": "001 Buscar produto por ID inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body({\r",
													"    \"message\": \"Produto não encontrado\"\r",
													"});\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/produtos/{{idInvalido}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"produtos",
												"{{idInvalido}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "/carrinhos",
			"item": [
				{
					"name": "Casos negativos",
					"item": [
						{
							"name": "Cadastrar carrinho",
							"item": [
								{
									"name": "001 Cadastrar carrinho com produto inválido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const string = `${\"Produto não encontrado\"}`\r",
													"\r",
													"pm.test(\"O body contém as strings esperadas\", () =>{\r",
													"    pm.expect(pm.response.text()).to.include(string);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 400\",  () =>{\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Bad Request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// ---------------------------------Deletes----------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const id = pm.environment.get('_userId')\r",
													"const token =  pm.environment.get('token');\r",
													"\r",
													"    const postRequest = {\r",
													"        url: `${url}/usuarios/${id}`,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                'Content-Type': 'application/json'\r",
													"                    }\r",
													"                }\r",
													"\r",
													"        //deletando usuário\r",
													"            pm.sendRequest(postRequest, (err, response) => {\r",
													"                const res = response.json()\r",
													"                console.log(err ? err : res);\r",
													"                try{\r",
													"                    console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                }catch{\r",
													"                    console.log(\"Erro deletar usuário\")\r",
													"\r",
													"                    }})\r",
													"              "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"2552548825\",\r\n      \"quantidade\": 2\r\n    }   ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"response": []
								},
								{
									"name": "002 Cadastrar carrinho com token inválido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            \r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\":nomeProduto,\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                            pm.environment.set(\"idProduto\", res._id);\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falaha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\",  () =>{\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body({\r",
													"    \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\r",
													"});\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"const token =  pm.environment.get('token');\r",
													"const id = pm.environment.get('_userId')\r",
													"  \r",
													"    \r",
													"        \r",
													"        //criando a requisição\r",
													"        const deleteProdutoRequest = {\r",
													"        url: `${url}/produtos/${idP}`,\r",
													"            method: 'DELETE',\r",
													"            header: {\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization' : `Bearer ${token}`\r",
													"                        }\r",
													"                    }\r",
													"\r",
													"            //deletando produto \r",
													"            pm.sendRequest(deleteProdutoRequest, (err, response) => {\r",
													"                const res = response.json()\r",
													"                console.log(err ? err : res); try{\r",
													"\r",
													"\r",
													"                const postRequest = {\r",
													"                    url: `${url}/usuarios/${id}`,\r",
													"                    method: 'DELETE',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json'\r",
													"                        }\r",
													"                        }\r",
													"\r",
													"                //deletando usuário\r",
													"                pm.sendRequest(postRequest, (err, response) => {\r",
													"                    const res = response.json()\r",
													"                    console.log(err ? err : res);\r",
													"                    try{\r",
													"                        console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                    }catch{\r",
													"                        console.log(\"Erro deletar usuário\")\r",
													"\r",
													"                    }})\r",
													"       \r",
													"\r",
													"                        }catch{console.warn(\"erro ao deletar produto\")} })\r",
													"               "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIvalido}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduto}}\",\r\n      \"quantidade\": 2\r\n    }   ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"response": []
								},
								{
									"name": "003 Cadastrar carrinho com token vazio",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            \r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\":nomeProduto,\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                            pm.environment.set(\"idProduto\", res._id);\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falaha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\",  () =>{\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body({\r",
													"    \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\r",
													"});\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has string\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"const token =  pm.environment.get('token');\r",
													"const id = pm.environment.get('_userId')\r",
													"  \r",
													"    \r",
													"        \r",
													"        //criando a requisição\r",
													"        const deleteProdutoRequest = {\r",
													"        url: `${url}/produtos/${idP}`,\r",
													"            method: 'DELETE',\r",
													"            header: {\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'Authorization' : `Bearer ${token}`\r",
													"                        }\r",
													"                    }\r",
													"\r",
													"            //deletando produto \r",
													"            pm.sendRequest(deleteProdutoRequest, (err, response) => {\r",
													"                const res = response.json()\r",
													"                console.log(err ? err : res); try{\r",
													"\r",
													"\r",
													"                const postRequest = {\r",
													"                    url: `${url}/usuarios/${id}`,\r",
													"                    method: 'DELETE',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json'\r",
													"                        }\r",
													"                        }\r",
													"\r",
													"                //deletando usuário\r",
													"                pm.sendRequest(postRequest, (err, response) => {\r",
													"                    const res = response.json()\r",
													"                    console.log(err ? err : res);\r",
													"                    try{\r",
													"                        console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                    }catch{\r",
													"                        console.log(\"Erro deletar usuário\")\r",
													"\r",
													"                    }})\r",
													"       \r",
													"\r",
													"                        }catch{console.warn(\"erro ao deletar produto\")} })\r",
													"               "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenVazio}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduto}}\",\r\n      \"quantidade\": 2\r\n    }   ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Buscar carrinho por ID",
							"item": [
								{
									"name": "001 Buscar carrinho por ID inválido",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code retornou um Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body({\"message\": \"Carrinho não encontrado\"});\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/carrinhos/{{idInvalido}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"{{idInvalido}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cancelar compra",
							"item": [
								{
									"name": "001 Excluir carrinho com token inválido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            \r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\":nomeProduto,\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                              pm.environment.set(\"idProduto\", res._id);\r",
													"                              const id = pm.environment.get('idProduto')\r",
													"\r",
													"                        //criando carinho\r",
													"                        const postRequestCarrinho = {\r",
													"                            url: `${url}/carrinhos`,\r",
													"                            method: 'POST',\r",
													"                            header: {\r",
													"                                'Authorization': `Bearer ${token}`,\r",
													"                                'Content-Type': 'application/json'\r",
													"                            },\r",
													"                            body: {\r",
													"                            mode: 'raw',\r",
													"                            raw: JSON.stringify({\r",
													"                                    \"produtos\": [{\r",
													"                                            \"idProduto\": id,\r",
													"                                            \"quantidade\": 1\r",
													"                                            } ]\r",
													"                                        })\r",
													"                                }\r",
													"                            }\r",
													"\r",
													"                        pm.sendRequest(postRequestCarrinho, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                             } \r",
													"                            catch{\r",
													"\r",
													"                            }})\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\",  () =>{\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Erro na requisição\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
													"});\r",
													"\r",
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body({\r",
													"    \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\r",
													"});\r",
													"});\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const token =  pm.environment.get('token');\r",
													"\r",
													"    // criando requisição\r",
													"     const deleteRequest = {\r",
													"        url: `${url}/carrinhos/cancelar-compra`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization' : `Bearer ${token}`\r",
													"                }\r",
													"            }\r",
													"\r",
													"            //deletando carinho\r",
													"            pm.sendRequest(deleteRequest, (err, response) => {\r",
													"                const res = response.json()\r",
													"                console.log(err ? err : res); \r",
													"                try{\r",
													"                    const id = pm.environment.get('_userId')\r",
													"                    const idP = pm.environment.get('idProduto');\r",
													"\r",
													"                //criando a requisição\r",
													"                 const deleteProdutoRequest = {\r",
													"                url: `${url}/produtos/${idP}`,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                        'Content-Type': 'application/json',\r",
													"                        'Authorization' : `Bearer ${token}`\r",
													"                        }\r",
													"                    }\r",
													"\r",
													"                    //deletando produto \r",
													"                    pm.sendRequest(deleteProdutoRequest, (err, response) => {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res); try{\r",
													"\r",
													"                    // criando requisição\r",
													"                    const postRequest = {\r",
													"                    url: `${url}/usuarios/${id}`,\r",
													"                    method: 'DELETE',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json'\r",
													"                        }\r",
													"                        }\r",
													"\r",
													"                //deletando usuário\r",
													"                pm.sendRequest(postRequest, (err, response) => {\r",
													"                    const res = response.json()\r",
													"                    console.log(err ? err : res);\r",
													"                    try{\r",
													"                        console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                    }catch{\r",
													"                        console.log(\"Erro deletar usuário\")\r",
													"\r",
													"                    }})\r",
													"       \r",
													"\r",
													"                        }catch{console.warn(\"erro ao deletar produto\")} })\r",
													"\r",
													"                } catch{\r",
													"                    console.warn(\"erro ao deletar carinho\");\r",
													"                }\r",
													"            })\r",
													"\r",
													"                "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenInvalido}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos/cancelar-compra",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"cancelar-compra"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Concluir compra",
							"item": [
								{
									"name": "001 Concluir compra com token inválido",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            \r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\":nomeProduto,\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                              pm.environment.set(\"idProduto\", res._id);\r",
													"                              const id = pm.environment.get('idProduto')\r",
													"\r",
													"                        //criando carinho\r",
													"                        const postRequestCarrinho = {\r",
													"                            url: `${url}/carrinhos`,\r",
													"                            method: 'POST',\r",
													"                            header: {\r",
													"                                'Authorization': `Bearer ${token}`,\r",
													"                                'Content-Type': 'application/json'\r",
													"                            },\r",
													"                            body: {\r",
													"                            mode: 'raw',\r",
													"                            raw: JSON.stringify({\r",
													"                                    \"produtos\": [{\r",
													"                                            \"idProduto\": id,\r",
													"                                            \"quantidade\": 1\r",
													"                                            } ]\r",
													"                                        })\r",
													"                                }\r",
													"                            }\r",
													"\r",
													"                        pm.sendRequest(postRequestCarrinho, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                             } \r",
													"                            catch{\r",
													"\r",
													"                            }})\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\",  () =>{\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Erro na requisição\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([401]);\r",
													"});\r",
													"\r",
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body({\r",
													"    \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\r",
													"});\r",
													"});\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const token =  pm.environment.get('token');\r",
													"\r",
													"    // criando requisição\r",
													"     const deleteRequest = {\r",
													"        url: `${url}/carrinhos/cancelar-compra`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization' : `Bearer ${token}`\r",
													"                }\r",
													"            }\r",
													"\r",
													"            //deletando carinho\r",
													"            pm.sendRequest(deleteRequest, (err, response) => {\r",
													"                const res = response.json()\r",
													"                console.log(err ? err : res); \r",
													"                try{\r",
													"                    const id = pm.environment.get('_userId')\r",
													"                    const idP = pm.environment.get('idProduto');\r",
													"\r",
													"                //criando a requisição\r",
													"                 const deleteProdutoRequest = {\r",
													"                url: `${url}/produtos/${idP}`,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                        'Content-Type': 'application/json',\r",
													"                        'Authorization' : `Bearer ${token}`\r",
													"                        }\r",
													"                    }\r",
													"\r",
													"                    //deletando produto \r",
													"                    pm.sendRequest(deleteProdutoRequest, (err, response) => {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res); try{\r",
													"\r",
													"                    // criando requisição\r",
													"                    const postRequest = {\r",
													"                    url: `${url}/usuarios/${id}`,\r",
													"                    method: 'DELETE',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json'\r",
													"                        }\r",
													"                        }\r",
													"\r",
													"                //deletando usuário\r",
													"                pm.sendRequest(postRequest, (err, response) => {\r",
													"                    const res = response.json()\r",
													"                    console.log(err ? err : res);\r",
													"                    try{\r",
													"                        console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                    }catch{\r",
													"                        console.log(\"Erro deletar usuário\")\r",
													"\r",
													"                    }})\r",
													"       \r",
													"\r",
													"                        }catch{console.warn(\"erro ao deletar produto\")} })\r",
													"\r",
													"                } catch{\r",
													"                    console.warn(\"erro ao deletar carinho\");\r",
													"                }\r",
													"            })\r",
													"\r",
													"                "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenInvalido}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos/concluir-compra",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"concluir-compra"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Casos positivos",
					"item": [
						{
							"name": "Listar carrinhos",
							"item": [
								{
									"name": "001 Listar carrinhos",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"const body = `${\"quantidade\", \"carrinhos\"}`\r",
													"\r",
													"pm.test(\"Contém os objetos esperados\", () => {\r",
													"    pm.expect(pm.response.text()).to.include(body);\r",
													"});\r",
													"\r",
													"pm.test(\"Houve sucesso na solicitação GET\", () => {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cadastrar carrinho",
							"item": [
								{
									"name": "001 Cadastrar carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            \r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\":nomeProduto,\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                            pm.environment.set(\"idProduto\", res._id);\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falaha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"const string = `${\"Cadastro realizado com sucesso\", \"_id\"}`\r",
													"\r",
													"pm.test(\"O body contém as strings esperadas\", () =>{\r",
													"    pm.expect(pm.response.text()).to.include(string);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 200\",  () =>{\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([201]);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"const token =  pm.environment.get('token');\r",
													"\r",
													"    // criando requisição\r",
													"     const deleteRequest = {\r",
													"        url: `${url}/carrinhos/cancelar-compra`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization' : `Bearer ${token}`\r",
													"                }\r",
													"            }\r",
													"\r",
													"            //deletando carinho\r",
													"            pm.sendRequest(deleteRequest, (err, response) => {\r",
													"                const res = response.json()\r",
													"                console.log(err ? err : res); \r",
													"                try{\r",
													"                    const id = pm.environment.get('_userId')\r",
													"\r",
													"                //criando a requisição\r",
													"                 const deleteProdutoRequest = {\r",
													"                url: `${url}/produtos/${idP}`,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                        'Content-Type': 'application/json',\r",
													"                        'Authorization' : `Bearer ${token}`\r",
													"                        }\r",
													"                    }\r",
													"\r",
													"                    //deletando produto \r",
													"                    pm.sendRequest(deleteProdutoRequest, (err, response) => {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res); try{\r",
													"\r",
													"                    // criando requisição\r",
													"                    const postRequest = {\r",
													"                    url: `${url}/usuarios/${id}`,\r",
													"                    method: 'DELETE',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json'\r",
													"                        }\r",
													"                        }\r",
													"\r",
													"                //deletando usuário\r",
													"                pm.sendRequest(postRequest, (err, response) => {\r",
													"                    const res = response.json()\r",
													"                    console.log(err ? err : res);\r",
													"                    try{\r",
													"                        console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                    }catch{\r",
													"                        console.log(\"Erro deletar usuário\")\r",
													"\r",
													"                    }})\r",
													"       \r",
													"\r",
													"                        }catch{console.warn(\"erro ao deletar produto\")} })\r",
													"\r",
													"                } catch{\r",
													"                    console.warn(\"erro ao deletar carinho\");\r",
													"                }\r",
													"            })\r",
													"\r",
													"                "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduto}}\",\r\n      \"quantidade\": 2\r\n    }   ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Concluir compra",
							"item": [
								{
									"name": "001 Concluir compra",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            \r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\":nomeProduto,\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                              pm.environment.set(\"idProduto\", res._id);\r",
													"                              const id = pm.environment.get('idProduto')\r",
													"\r",
													"                        //criando carinho\r",
													"                        const postRequestCarrinho = {\r",
													"                            url: `${url}/carrinhos`,\r",
													"                            method: 'POST',\r",
													"                            header: {\r",
													"                                'Authorization': `Bearer ${token}`,\r",
													"                                'Content-Type': 'application/json'\r",
													"                            },\r",
													"                            body: {\r",
													"                            mode: 'raw',\r",
													"                            raw: JSON.stringify({\r",
													"                                    \"produtos\": [{\r",
													"                                            \"idProduto\": id,\r",
													"                                            \"quantidade\": 1\r",
													"                                            } ]\r",
													"                                        })\r",
													"                                }\r",
													"                            }\r",
													"\r",
													"                        pm.sendRequest(postRequestCarrinho, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                            pm.environment.set(\"idCarrinho\", res._id); } \r",
													"                            catch{\r",
													"\r",
													"                            }})\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\",  () =>{\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"const token =  pm.environment.get('token'); \r",
													"const id = pm.environment.get('_userId')\r",
													"\r",
													"        //criando a requisição\r",
													"        const deleteProdutoRequest = {\r",
													"        url: `${url}/produtos/${idP}`,\r",
													"            method: 'DELETE',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                    'Authorization' : `Bearer ${token}`\r",
													"                        }\r",
													"                    }\r",
													"\r",
													"            //deletando produto \r",
													"            pm.sendRequest(deleteProdutoRequest, (err, response) => {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res); try{\r",
													"\r",
													"                    const postRequest = {\r",
													"                    url: `${url}/usuarios/${id}`,\r",
													"                    method: 'DELETE',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json'\r",
													"                        }\r",
													"                        }\r",
													"\r",
													"            //deletando usuário\r",
													"            pm.sendRequest(postRequest, (err, response) => {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"                try{\r",
													"                    console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                }catch{\r",
													"                    console.log(\"Erro deletar usuário\")\r",
													"\r",
													"                    }})\r",
													"       \r",
													"\r",
													"    }catch{console.warn(\"erro ao deletar produto\")} })\r",
													"\r",
													"                "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos/concluir-compra",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"concluir-compra"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Excluir Carrinho",
							"item": [
								{
									"name": "001 Excluir carrinho",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            \r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\":nomeProduto,\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                              pm.environment.set(\"idProduto\", res._id);\r",
													"                              const id = pm.environment.get('idProduto')\r",
													"\r",
													"                        //criando carinho\r",
													"                        const postRequestCarrinho = {\r",
													"                            url: `${url}/carrinhos`,\r",
													"                            method: 'POST',\r",
													"                            header: {\r",
													"                                'Authorization': `Bearer ${token}`,\r",
													"                                'Content-Type': 'application/json'\r",
													"                            },\r",
													"                            body: {\r",
													"                            mode: 'raw',\r",
													"                            raw: JSON.stringify({\r",
													"                                    \"produtos\": [{\r",
													"                                            \"idProduto\": id,\r",
													"                                            \"quantidade\": 1\r",
													"                                            } ]\r",
													"                                        })\r",
													"                                }\r",
													"                            }\r",
													"\r",
													"                        pm.sendRequest(postRequestCarrinho, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                            pm.environment.set(\"idCarrinho\", res._id); } \r",
													"                            catch{\r",
													"\r",
													"                            }})\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\",  () =>{\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"Body is correct\", function () {\r",
													"    pm.response.to.have.body({\r",
													"    \"message\": \"Registro excluído com sucesso. Estoque dos produtos reabastecido\"\r",
													"});\r",
													"});\r",
													"\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"const token =  pm.environment.get('token'); \r",
													"const id = pm.environment.get('_userId')\r",
													"\r",
													"        //criando a requisição\r",
													"        const deleteProdutoRequest = {\r",
													"        url: `${url}/produtos/${idP}`,\r",
													"            method: 'DELETE',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                    'Authorization' : `Bearer ${token}`\r",
													"                        }\r",
													"                    }\r",
													"\r",
													"            //deletando produto \r",
													"            pm.sendRequest(deleteProdutoRequest, (err, response) => {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res); try{\r",
													"\r",
													"                    const postRequest = {\r",
													"                    url: `${url}/usuarios/${id}`,\r",
													"                    method: 'DELETE',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json'\r",
													"                        }\r",
													"                        }\r",
													"\r",
													"            //deletando usuário\r",
													"            pm.sendRequest(postRequest, (err, response) => {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"                try{\r",
													"                    console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                }catch{\r",
													"                    console.log(\"Erro deletar usuário\")\r",
													"\r",
													"                    }})\r",
													"       \r",
													"\r",
													"    }catch{console.warn(\"erro ao deletar produto\")} })\r",
													"\r",
													"                "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos/cancelar-compra",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"cancelar-compra"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Buscar carrinho",
							"item": [
								{
									"name": "Buscar carrinho por ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const url = pm.environment.get('baseURL')\r",
													"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
													"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
													"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
													"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
													"\r",
													"// criando um usário\r",
													"const postRequest = {\r",
													"\r",
													"    url: `${url}/usuarios`,\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            \"nome\": name,\r",
													"            \"email\": email,\r",
													"            \"password\": senha,\r",
													"            \"administrador\": \"true\"\r",
													"        })\r",
													"    }\r",
													"\r",
													"}\r",
													"\r",
													"// mandando a requisição de criar usuário\r",
													"pm.sendRequest(postRequest, (err, response) => {\r",
													"    const res = response.json()\r",
													"    console.log(err ? err : res);\r",
													"    try {\r",
													"        //setando as informações\r",
													"        pm.environment.set('senhaUsuario', senha)\r",
													"        pm.environment.set('emailUsuario', email)\r",
													"        pm.environment.set('_userId', res._id)\r",
													"        pm.environment.set('nomeProduto', nomeProduto)\r",
													"\r",
													"        // realizando o login\r",
													"        const postRequestLogin = {\r",
													"\r",
													"            url: `${url}/login`,\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json'\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"email\": email,\r",
													"                    \"password\": senha\r",
													"                })\r",
													"            }\r",
													"        } \r",
													"        \r",
													"        // mandando requisição de fazer login\r",
													"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
													"            const res = response.json()\r",
													"            console.log(err ? err : res);\r",
													"            try {\r",
													"                \r",
													"            //setando o token\r",
													"            pm.environment.set('token', res.authorization.slice(7))\r",
													"\r",
													"            // pegando o token\r",
													"            const token = pm.environment.get('token')\r",
													"            \r",
													"            //criando produto\r",
													"            const postRequestProduto = {\r",
													"                url: `${url}/produtos`,\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Authorization': `Bearer ${token}`,\r",
													"                    'Content-Type': 'application/json'\r",
													"                },\r",
													"                body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    \"nome\":nomeProduto,\r",
													"                    \"preco\": 2500,\r",
													"                    \"descricao\": \"celular\",\r",
													"                    \"quantidade\": 10\r",
													"                    })\r",
													"                }\r",
													"            }\r",
													"            //mandando requisição de produto\r",
													"            pm.sendRequest(postRequestProduto, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                              pm.environment.set(\"idProduto\", res._id);\r",
													"                              const id = pm.environment.get('idProduto')\r",
													"\r",
													"                        //criando carinho\r",
													"                        const postRequestCarrinho = {\r",
													"                            url: `${url}/carrinhos`,\r",
													"                            method: 'POST',\r",
													"                            header: {\r",
													"                                'Authorization': `Bearer ${token}`,\r",
													"                                'Content-Type': 'application/json'\r",
													"                            },\r",
													"                            body: {\r",
													"                            mode: 'raw',\r",
													"                            raw: JSON.stringify({\r",
													"                                    \"produtos\": [{\r",
													"                                            \"idProduto\": id,\r",
													"                                            \"quantidade\": 1\r",
													"                                            } ]\r",
													"                                        })\r",
													"                                }\r",
													"                            }\r",
													"\r",
													"                        pm.sendRequest(postRequestCarrinho, function (err, response) {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res);\r",
													"                        try{\r",
													"                            pm.environment.set('idCarrinho',res._id);\r",
													"                            pm.environment.set(\"idProduto\", res._id); } \r",
													"                            catch{\r",
													"\r",
													"                            }})\r",
													"\r",
													"                        } catch{\r",
													"                            console.warn(\"Falha no cadastro de produto\")\r",
													"\r",
													"                        }})\r",
													"                \r",
													"            }catch{\r",
													"                \r",
													"                console.warn(\"Falha no login\")\r",
													"            }\r",
													"        });\r",
													"\r",
													"        \r",
													"    } catch{\r",
													"        \r",
													"        console.warn(\"Falha no cadastro\")\r",
													"    } \r",
													"\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\",  () =>{\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"\r",
													"// ---------------------------------Deletes----------------------------------------\r",
													"\r",
													"// pegando as variáveis de ambiente\r",
													"const url = pm.environment.get('baseURL');\r",
													"const email = pm.environment.get('emailUsuario');\r",
													"const senha = pm.environment.get('senhaUsuario');\r",
													"const idP = pm.environment.get('idProduto');\r",
													"const token =  pm.environment.get('token');\r",
													"\r",
													"    // criando requisição\r",
													"     const deleteRequest = {\r",
													"        url: `${url}/carrinhos/cancelar-compra`,\r",
													"        method: 'DELETE',\r",
													"        header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'Authorization' : `Bearer ${token}`\r",
													"                }\r",
													"            }\r",
													"\r",
													"            //deletando carinho\r",
													"            pm.sendRequest(deleteRequest, (err, response) => {\r",
													"                const res = response.json()\r",
													"                console.log(err ? err : res); \r",
													"                try{\r",
													"                    const id = pm.environment.get('_userId')\r",
													"\r",
													"                //criando a requisição\r",
													"                 const deleteProdutoRequest = {\r",
													"                url: `${url}/produtos/${idP}`,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                        'Content-Type': 'application/json',\r",
													"                        'Authorization' : `Bearer ${token}`\r",
													"                        }\r",
													"                    }\r",
													"\r",
													"                    //deletando produto \r",
													"                    pm.sendRequest(deleteProdutoRequest, (err, response) => {\r",
													"                        const res = response.json()\r",
													"                        console.log(err ? err : res); try{\r",
													"\r",
													"                            const postRequest = {\r",
													"                    url: `${url}/usuarios/${id}`,\r",
													"                    method: 'DELETE',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json'\r",
													"                        }\r",
													"                        }\r",
													"\r",
													"                //deletando usuário\r",
													"                pm.sendRequest(postRequest, (err, response) => {\r",
													"                    const res = response.json()\r",
													"                    console.log(err ? err : res);\r",
													"                    try{\r",
													"                        console.log(\"Sucesso em todas as requisições\")\r",
													"\r",
													"                    }catch{\r",
													"                        console.log(\"Erro deletar usuário\")\r",
													"\r",
													"                    }})\r",
													"       \r",
													"\r",
													"                        }catch{console.warn(\"erro ao deletar produto\")} })\r",
													"\r",
													"                } catch{\r",
													"                    console.warn(\"erro ao deletar carinho\");\r",
													"                }\r",
													"            })\r",
													"\r",
													"              "
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseURL}}/carrinhos/{{idCarrinho}}",
											"host": [
												"{{baseURL}}"
											],
											"path": [
												"carrinhos",
												"{{idCarrinho}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Cenário de teste",
			"item": [
				{
					"name": "fluxo de compras",
					"item": [
						{
							"name": "Cadastrar usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"console.log(response);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"//validação de atributos(presença)\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo)=> {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, ()=>{\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"//validação de atributos (conteúdo)\r",
											"\r",
											"pm.test('Menssagem correta retornada', () => {\r",
											"    pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"pm.environment.set('nomeUsuario', name)\r",
											"pm.environment.set('emailUsuario', email)\r",
											"pm.environment.set('senhaUsuario',senha)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeUsuario}}\",\r\n  \"email\": \"{{emailUsuario}}\",\r\n  \"password\": \"{{senhaUsuario}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realizar login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"token\", response.authorization.slice(7));\r",
											"\r",
											"pm.test(\"Status code is 200\", () =>{\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{emailUsuario}}\",\r\n  \"password\": \"{{senhaUsuario}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"let nomeP = pm.variables.replaceIn('{{$randomProductName}}')\r",
											"\r",
											"pm.environment.set('nomeProduto', nomeP)\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"status code is 201\", function(){\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"const response = pm.response.json();\r",
											"pm.environment.set('idProduto',response._id);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeProduto}}\",\r\n  \"preco\": 1900,\r\n  \"descricao\": \"{{nomeProduto}}\",\r\n  \"quantidade\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/produtos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{idProduto}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/carrinhos",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Concluir compra",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",  ()  =>{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/carrinhos/concluir-compra",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Realizar login",
					"item": [
						{
							"name": "cadastrar usuário",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// geral email e senha\r",
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"// setando email e senha\r",
											"pm.environment.set('emailUsuario', email);\r",
											"pm.environment.set('nomeUsuario', name);\r",
											"pm.environment.set('senhaUsuario', senha);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//verificando o status code\r",
											"pm.test(\"Status code is 201\", () =>{\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// verificando se o cadastro foi concluído\r",
											"pm.test(\"Realizou o cadastro\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeUsuario}}\",\r\n  \"email\": \"{{emailUsuario}}\",\r\n  \"password\": \"{{senhaUsuario}}\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/usuarios",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "realizar login",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"//---------------------------- deletes-----------\r",
											"const id = pm.environment.get('_userId')\r",
											"const url = pm.environment.get('baseURL')\r",
											"//criando a requisição\r",
											"    const postRequest = {\r",
											"        url: `${url}/usuarios/${id}`,\r",
											"            method: 'DELETE',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json'\r",
											"                    }\r",
											"                }\r",
											"\r",
											"        //deletando usuário\r",
											"            pm.sendRequest(postRequest, (err, response) => {\r",
											"                const res = response.json()\r",
											"                console.log(err ? err : res);})\r",
											"\r",
											"           \r",
											"       "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{emailUsuario}}\",\r\n  \"password\": \"{{senhaUsuario}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/login",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var initialVal = pm.globals.get(\"initialVal\");",
					"pm.globals.set(\"updateVl\", initialVal + \"/requests/\")"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}